@techreport{gp2020systemarchitecture,
  title = {TEE System Architecture v1.3},
  institution = {GlobalPlatform},
  author = {GlobalPlatform Technical Committee},
  howpublished = {\url{https://globalplatform.org/specs-library/tee-system-architecture/}},
  year = {2022}
}

@techreport{gp2020internalapi,
  title = {{TEE} Internal Core API Specification v1.3.1},
  institution = {GlobalPlatform},
  author = {GlobalPlatform Technical Committee},
  howpublished = {\url{https://globalplatform.org/specs-library/tee-internal-core-api-specification/}},
  year = {2021}
}

@techreport{gp2020clientapi,
  title = {{TEE} Client {API} Specification v1.0},
  institution = {GlobalPlatform},
  author = {GlobalPlatform Technical Committee},
  howpublished = {\url{https://globalplatform.org/specs-library/tee-client-api-specification/}},
  year = {2010}
}

@techreport{gp2020protectionprofile,
	title = {TEE Protection Profile v1.3},
	institution = {GlobalPlatform},
	author = {GlobalPlatform Technical Committee},
	howpublished = {\url{https://globalplatform.org/specs-library/tee-protection-profile/}},
	year = {2020}
}

@article{rushby1981separationkernel,
	author = {Rushby, J. M.},
	title = {Design and Verification of Secure Systems},
	year = {1981},
	issue_date = {December 1981},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {15},
	number = {5},
	issn = {0163-5980},
	url = {https://doi.org/10.1145/1067627.806586},
	doi = {10.1145/1067627.806586},
	abstract = {
	This paper reviews some of the difficulties that arise in the verification
	of kernelized secure systems and suggests new techniques for their
	resolution. It is proposed that secure systems should be conceived as
	distributed systems in which security is achieved partly through the
	physical separation of its individual components and partly through the
	mediation of trusted functions performed within some of those components.
	The purpose of a security kernel is simply to allow such a 'distributed'
	system to actually run within a single processor; policy enforcement is
	not the concern of a security kernel. This approach decouples verification
	of components which perform trusted functions from verification of the
	security kernel. This latter task may be accomplished by a new 
	verification technique called 'proof of separability' which explicitly 
	addresses the security relevant aspects of interrupt handling and other 
	issues ignored by present methods.
	},
	journal = {SIGOPS Oper. Syst. Rev.},
	month = {dec},
	numpages = {10}
}

@inproceedings{
	sabt2015tee,
	author={Sabt, Mohamed and Achemlal, Mohammed and Bouabdallah, Abdelmadjid},
	booktitle={2015 IEEE Trustcom/BigDataSE/ISPA},
	title={Trusted Execution Environment: What It is, and What It is Not}, 
	year={2015},  
	doi={10.1109/Trustcom.2015.357}
}

@techreport{
	spkk2007,
	author={National Security Agency}, 
	title={U.S. government protection profile for separation kernels in environments requiring high robustness},
	year={2007}
	url={https://www.niap-ccevs.org/MMO/PP/pp_skpp_hr_v1.03.pdf}
}

@article{kohlbrenner2020opentees,
	author={Kohlbrenner, David and Shinde, Shweta and Lee, Dayeol and Asanovic, Krste and Song, Dawn},
	journal={IEEE Security and Privacy},
	title={Building Open Trusted Execution Environments},
	year={2020},
	volume={18},
	number={5},
	pages={47-56},
	doi={10.1109/MSEC.2020.2990649}
}

@misc{optee,
	title = {Open Portable Trusted Execution Environment ({OP-TEE})},
	howpublished = {\url{https://www.op-tee.org/}},
	note = {Accessed: 2023-01-04}
}